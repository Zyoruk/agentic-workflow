[build-system]
requires = ["setuptools>=68.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "agentic-workflow"
version = "0.6.0"
description = "AI-driven agentic workflow system for autonomous software development"
authors = [
    {name = "Zyoruk", email = "ce.zyoruk@gmail.com"},
]
readme = "README.md"
requires-python = ">=3.11"
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]
dependencies = [
    "fastapi>=0.109.0",
    "uvicorn[standard]>=0.27.0",
    "langchain>=0.1.0",
    "openai>=1.12.0",
    "neo4j>=5.15.0",
    "weaviate-client>=4.4.0",
    "redis>=5.0.1",
    "networkx>=3.2.1",
    "pydantic>=2.6.0",
    "pandas>=2.2.0",
    "numpy>=1.26.0",
    "asyncio-mqtt>=0.16.2",
    "prometheus-client>=0.19.0",
    "pyyaml>=6.0.1",
]

[project.optional-dependencies]
dev = [
    "pytest>=8.0.0",
    "pytest-cov>=4.1.0",
    "pytest-asyncio>=0.23.0",
    "pytest-mock>=3.12.0",
    "black>=24.1.0",
    "flake8>=7.0.0",
    "mypy>=1.8.0",
    "isort>=5.13.0",
    "pre-commit>=3.6.0",
    "jupyterlab>=4.1.0",
    "ipython>=8.21.0",
    "commitizen>=3.13.0",
    "types-PyYAML>=6.0.12",
]
docs = [
    "sphinx>=7.2.0",
    "sphinx-rtd-theme>=1.3.0",
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.4.0",
]
test = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-asyncio>=0.21.0",
    "pytest-mock>=3.12.0",
    "coverage>=7.3.0",
]
embedding = [
    "langchain-openai",
]

[project.urls]
Homepage = "https://github.com/yourusername/agentic-workflow"
Documentation = "https://agentic-workflow.readthedocs.io"
Repository = "https://github.com/yourusername/agentic-workflow"

[tool.setuptools.packages.find]
where = ["src"]

[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["agentic_workflow"]

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = false
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "neo4j.*",
    "weaviate.*",
    "langchain.*",
]
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = ["tests.*"]
disallow_untyped_defs = false
disallow_incomplete_defs = false
disallow_untyped_decorators = false

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
fail_under = 80

[tool.commitizen]
name = "cz_conventional_commits"
tag_format = "v$version"
version_scheme = "semver"
version_provider = "pep621"
update_changelog_on_bump = true
major_version_zero = true
changelog_file = "CHANGELOG.md"
changelog_format = "%(version)s (%(date)s)"
changelog_incremental = true
git_auto_tag = true
git_auto_push = false  # Set to true if you want automatic pushing
commit_parser = "angular"
version_files = [
    "src/agentic_workflow/__init__.py:__version__"
]

[tool.commitizen.customize]
message_template = "{{change_type}}{{scope}}: {{message}}"
example = "feat(parser): add new parsing feature"
schema = "<type>(<scope>): <subject>"
schema_pattern = "^(build|ci|docs|feat|fix|perf|refactor|style|test|chore|revert)(\\(.+\\))?: .{1,50}"
bump_pattern = "^(BREAKING CHANGE|feat|fix|perf)"
bump_map = {"BREAKING CHANGE" = "MAJOR", "feat" = "MINOR", "fix" = "PATCH", "perf" = "PATCH"}
info_path = "cz_info.txt"
info = """
Conventional commit types:
- feat: A new feature
- fix: A bug fix
- docs: Documentation only changes
- style: Changes that do not affect the meaning of the code
- refactor: A code change that neither fixes a bug nor adds a feature
- perf: A code change that improves performance
- test: Adding missing tests or correcting existing tests
- build: Changes that affect the build system or external dependencies
- ci: Changes to our CI configuration files and scripts
- chore: Other changes that don't modify src or test files
- revert: Reverts a previous commit

Breaking changes: Add 'BREAKING CHANGE:' in the commit body or use '!' after type/scope
"""
